swagger: '2.0'
info:
  description: |-
    # Recurring payments

    Recurring payments is used for subscription payments such as weekly dues for newspaper access, monthly dues for public transportation, etc.

    1. A a draft agreement is initialized and the user is redirected for approval.
    2. The user approves the agreement and the merchant can call GET on the agreement to verify the status
    3. The merchant can start sending charges which will be charged the user in the future.

    The merchant is responsible for checking the status of charges, and cancelling any user access if charges are failing (or contacting the user)


    # Authenthication

    For information regarding authenthication please read:
    https://github.com/vippsas/vipps-recurring-api/blob/master/vipps-recurring-api.md#api-access-token
  version: '1.0'
  title: Recurring Payments Merchant API
host: 'apitest.vipps.no'
basePath: /recurring/api/v1
tags:
  - name: agreement-controller
    description: Agreement Controller
  - name: charge-controller
    description: Charge Controller
  - name: draft-agreement-controller
    description: Draft Agreement Controller
paths:
  /api/v1/agreement:
    get:
      tags:
        - agreement-controller
      summary: List Agreements
      operationId: listUsingGET
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: status
          in: query
          description: Filter by status
          required: false
          type: string
          allowEmptyValue: false
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Agreement'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  '/api/v1/agreement/{agreementId}':
    get:
      tags:
        - agreement-controller
      summary: Fetch an Agreement
      operationId: getUsingGET
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: Agreement ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Agreement'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '401':
          description: Unauthorized
        '404':
          description: Agreement not found
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
    post:
      tags:
        - agreement-controller
      summary: Update an Agreement
      operationId: updateUsingPOST
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - in: body
          name: agreement
          description: agreement
          required: true
          schema:
            $ref: '#/definitions/Agreement'
        - name: agreementId
          in: path
          description: Agreement ID
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Agreement'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '401':
          description: Unauthorized
        '404':
          description: Agreement not found
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
  '/api/v1/charge/{agreementId}':
    get:
      tags:
        - charge-controller
      summary: List Charges
      operationId: listUsingGET_1
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: The agreement identifier (id)
          required: true
          type: string
        - name: chargeStatus
          in: query
          description: The status of the charge
          required: false
          type: string
          allowEmptyValue: false
          enum:
            - PENDING
            - DUE
            - CHARGED
            - FAILED
            - CANCELLED
            - PARTIALLY_REFUNDED
            - REFUNDED
            - PROCESSING
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
    post:
      tags:
        - charge-controller
      summary: |-
        Create a new charge for a given agreement and customer.

        An idempotency key must be provided to ensure idempotent requests.
        Key size [1..30] characters.
      operationId: createUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Idempotent-Key
          in: header
          description: Idempotent-Key
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: Agreement ID
          required: true
          type: string
        - in: body
          name: charge
          description: charge
          required: true
          schema:
            $ref: '#/definitions/CreateCharge'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ChargeResponse'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/ChargeResponse'
        '204':
          description: No Content (operation succeeded previously)
          schema:
            $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '409':
          description: 'Conflict, retry in a moment. (simultaneous idempotent requests)'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
  '/api/v1/charge/{agreementId}/{chargeId}':
    get:
      tags:
        - charge-controller
      summary: Fetch a Charge
      operationId: getUsingGET_1
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: agreementId
          required: true
          type: string
        - name: chargeId
          in: path
          description: The charge identifier (id)
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ChargeResponse'
        '400':
          description: The requested charge does not exist
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
    delete:
      tags:
        - charge-controller
      summary: Cancel a Charge
      operationId: cancelUsingDELETE
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: The agreement identifier (id)
          required: true
          type: string
        - name: chargeId
          in: path
          description: The charge identifier (id)
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ChargeResponse'
        '204':
          description: No Content (operation succeeded previously)
          schema:
            $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '409':
          description: 'This charge is not in a deletable state, it may have already been charged to the user.'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
  '/api/v1/charge/{agreementId}/{chargeId}/refund':
    post:
      tags:
        - charge-controller
      summary: |-
        Refund a charge

        An idempotency key must be provided to ensure idempotent requests.
        Key size [1..30] characters.
      operationId: refundUsingPOST
      consumes:
        - application/json
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Idempotent-Key
          in: header
          description: Idempotent-Key
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - name: agreementId
          in: path
          description: The agreement identifier (id)
          required: true
          type: string
        - in: body
          name: charge
          description: charge
          required: true
          schema:
            $ref: '#/definitions/RefundRequestDto'
        - name: chargeId
          in: path
          description: The charge identifier (id)
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ChargeResponse'
        '400':
          description: 'Invalid request, check your parameters'
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '404':
          description: Charge does not exist (and never has)
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '500':
          description: Internal server error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Timeout
      deprecated: false
  /api/v1/draftAgreement:
    post:
      tags:
        - draft-agreement-controller
      summary: Send a new customer to Vipps in order to accept Agreement
      operationId: registerUsingPOST
      consumes:
        - application/json;charset=UTF-8
      produces:
        - application/json;charset=UTF-8
      parameters:
        - name: Authorization
          in: header
          description: Bearer 'auth token'
          required: true
          type: string
        - name: Merchant-Serial-Number
          in: header
          description: The applicable merchant serial number currently being represented
          required: true
          type: string
        - in: body
          name: draftAgreement
          description: draftAgreement
          required: true
          schema:
            $ref: '#/definitions/DraftAgreement'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DraftAgreementResponse'
        '201':
          description: OK
          schema:
            $ref: '#/definitions/DraftAgreementResponse'
        '400':
          description: Bad Request
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity (invalid json)
        '500':
          description: Internal Server Error
          schema:
            type: array
            items:
              $ref: '#/definitions/FieldErrorDto'
        '503':
          description: Service unavailable
        '504':
          description: Gateway Timeout
      deprecated: false
definitions:
  Agreement:
    type: object
    required:
      - interval
      - intervalCount
      - price
      - productDescription
      - productName
      - status
    properties:
      campaign:
        description: A campaign is a temporary lowering of the agreement price. The end user will only see the campaign if today's date is between the start and end date
        $ref: '#/definitions/campaign'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      id:
        type: string
        example: agr_5kSeqzFAMkfBbc
        description: Uniquely identifies this agreement
        readOnly: true
      interval:
        type: string
        example: week
        description: Interval for subscription
        enum:
          - day
          - week
          - month
      intervalCount:
        type: integer
        format: int32
        example: 2
        description: 'Number of intervals between charges. Example: interval=week, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year.'
        minimum: 1
        maximum: 31
        exclusiveMinimum: false
        exclusiveMaximum: false
      price:
        type: integer
        format: int32
        example: 7900
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      productDescription:
        type: string
        example: Fin abonnementspakke
      productName:
        type: string
        example: Pluss-abonnement
        description: Name of the product being subscribed to.
      startDate:
        type: string
        example: '2019-01-01T00:00:00Z'
        description: Date when agreement was started.
        readOnly: true
      status:
        type: string
        example: ACTIVE
        description: Status of the agreement.
        enum:
          - PENDING
          - ACTIVE
          - STOPPED
          - EXPIRED
      stopDate:
        type: string
        example: '2019-01-01T00:00:00Z'
        description: Date when agreement was stopped.
        readOnly: true
    title: Agreement
  ChargeResponse:
    type: object
    required:
      - amount
      - amountRefunded
      - dueDate
      - id
      - status
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      amountRefunded:
        type: integer
        format: int32
        example: 0
        description: |-
          The total amount which has been refunded, in case of status refund/partial refund.
          Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK
      description:
        type: string
        example: Bla bla bla
        readOnly: true
      dueDate:
        type: string
        example: '2030-12-31T00:00:00Z'
      id:
        type: string
        example: chg_WCVbcAbRCmu2zk
        description: 'Unique identifier for this charge, up to 15 characters.'
      status:
        type: string
        example: PENDING
        enum:
          - PENDING
          - DUE
          - CHARGED
          - FAILED
          - CANCELLED
          - PARTIALLY_REFUNDED
          - REFUNDED
          - PROCESSING
      transactionId:
        type: string
        example: 5001419121
        description: Contains null until the status has reached CHARGED
        readOnly: true
      type:
        type: string
        example: RECURRING
        readOnly: true
        enum:
          - INITIAL
          - RECURRING
          - ONEOFF
    title: ChargeResponse
  CreateCharge:
    type: object
    required:
      - amount
      - description
      - hasPriceChanged
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
      dueDate:
        type: string
        example: '2030-12-31'
        description: yyyy-MM-dd
      hasPriceChanged:
        type: boolean
        example: false
        description: 'If the amount exceeds the amount specified on the agreement, this field must be true to indicate that there is an update price for the parent subscription'
      retryDays:
        type: integer
        format: int32
        example: 5
        description: 'The service will attempt to charge the customer for N days [non inclusive], must be null or contain a value >= 0. If zero, no retries will be performed'
    title: CreateCharge
  DraftAgreement:
    type: object
    required:
      - currency
      - interval
      - intervalCount
      - isApp
      - merchantAgreementUrl
      - merchantRedirectUrl
      - price
      - productDescription
      - productName
    properties:
      campaign:
        description: A campaign is a temporary lowering of the agreement price. The end user will only see the campaign if today's date is between the start and end date
        $ref: '#/definitions/campaign'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      customerPhoneNumber:
        type: string
        example: '+4740000000'
        description: Customers phone number (if available). Used to simplify the following Vipps interaction
      initialCharge:
        $ref: '#/definitions/InitialCharge'
      interval:
        type: string
        example: WEEK
        description: Interval for subscription
        enum:
          - YEAR
          - MONTH
          - WEEK
          - DAY
      intervalCount:
        type: integer
        format: int32
        example: 2
        description: 'Number of intervals between charges. Example: interval=week, intervalCount=2 to be able to charge every two weeks. Charges should occur at least once a year'
        minimum: 1
        maximum: 31
        exclusiveMinimum: false
        exclusiveMaximum: false
      isApp:
        type: boolean
        example: true
        description: If merchant is redirecting user from an app.
      merchantAgreementUrl:
        type: string
        example: 'https://www.merchant.no/subscriptions/1234/'
        description: URL where Vipps can redirect the customer to view/administer their subscription.
      merchantRedirectUrl:
        type: string
        example: 'https://api.merchant.no/landing'
        description: URL where customer should be redirected after the agreement has been approved/rejected in the Vipps mobile application.
      oneOffCharge:
        $ref: '#/definitions/OneOffCharge'
      price:
        type: integer
        format: int32
        example: 7900
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      productDescription:
        type: string
        example: Fin abonnementspakke
      productName:
        type: string
        example: Pluss-abonnement
        description: Name of the product being subscribed to.
    title: DraftAgreement
  DraftAgreementResponse:
    type: object
    properties:
      agreementResource:
        type: string
        example: 'https://api.vipps.no/api/v1/agreement/agr_5kSeqzFAMkfBbc'
        description: 'Reference to AgreementDto which user may agree to. Initially the AgreementDto is in a pendingUserApproval state, and it enters active state once user has approved in the Vipps application.'
        readOnly: true
      redirectToVipps:
        type: string
        example: 'https://api.vipps.no/api/v1/register/U6JUjQXq8HQmmV'
        description: Customer should be redirected to Vipps using this URL.
        readOnly: true
    title: DraftAgreementResponse
  FieldErrorDto:
    type: object
    properties:
      code:
        type: string
      field:
        type: string
      message:
        type: string
    title: FieldErrorDto
  HealthCheckStatus:
    type: object
    properties:
      application:
        type: boolean
      cosmosDb:
        type: boolean
      paymentDb:
        type: boolean
    title: HealthCheckStatus
  InitialCharge:
    type: object
    required:
      - amount
      - currency
      - description
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
    title: InitialCharge
    description: An initial charge for a new agreement. The charge will be executed immediately when the user approves the agreement.
  OneOffCharge:
    type: object
    required:
      - amount
      - currency
      - description
    properties:
      amount:
        type: integer
        format: int32
        example: 234
        description: 'Treated as a whole sum postfixed with two decimals for cents, eg 234 = 2.34 NOK'
      currency:
        type: string
        example: NOK
        enum:
          - NOK
      description:
        type: string
        example: Månedsabonnement
        description: This field is visible to the end user in-app
    title: OneOffCharge
    description: An one-off charge with this agreement. For example a bundles sale (product + subscription).
  RefundRequestDto:
    type: object
    properties:
      amount:
        type: integer
        format: int32
        example: 100
        description: The amount to refund
      description:
        type: string
        example: 'Forgot to apply discount, refunding 50%'
        description: 'A textual description of the operation, which will be displayed in the users app.'
    title: RefundRequestDto
  campaign:
    type: object
    properties:
      campaignPrice:
        type: integer
        format: int32
        example: 1500
        description: The price of the agreement in the discount period. The lowering of the price will be displayed in-app.
      end:
        type: string
        example: '2019-06-01T00:00:00:00Z'
        description: The date and time the campaign ends. Needs to be UTC
    title: campaign
