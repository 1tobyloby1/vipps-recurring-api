---
swagger: "2.0"
info:
  description: "# Recurring payments\n\nRecurring payments is used for subscription\
    \ payments such as weekly dues for newspaper access, monthly dues for public transportation,\
    \ etc.\n\n1. A a draft agreement is initialized and the user is redirected for\
    \ approval.\n2. The user approves the agreement and the merchant can call GET\
    \ on the agreement to verify the status\n3. The merchant can start sending charges\
    \ which will be charged the user in the future.\n\nThe merchant is responsible\
    \ for checking the status of charges, and cancelling any user access if charges\
    \ are failing (or contacting the user)\n\n\n# Authenthication\n\nFor information\
    \ regarding authenthication please read:\nhttps://github.com/vippsas/vipps-recurring-api/blob/master/vipps-recurring-api.md#authentication-and-authorization---api-access-token"
  version: "1.0"
  title: "Recurring Payments Merchant API"
host: "10.78.12.69:10036"
basePath: "/mt1/vipps-recurring-merchant-api"
schemes:
- "http"
paths:
  /api/v1/agreement:
    get:
      tags:
      - "agreement-controller"
      summary: "List Agreements"
      operationId: "listUsingGET"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "status"
        in: "query"
        required: false
        type: "string"
        description: "Filter by status"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Agreement"
        400:
          description: "Bad Request"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
  /api/v1/agreement/{agreementId}:
    get:
      tags:
      - "agreement-controller"
      summary: "Fetch an Agreement"
      operationId: "getUsingGET"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Agreement"
        400:
          description: "Bad Request"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        401:
          description: "Unauthorized"
        404:
          description: "Agreement not found"
        500:
          description: "Internal Server Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
    post:
      tags:
      - "agreement-controller"
      summary: "Update an Agreement"
      operationId: "updateUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Agreement"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Agreement"
        400:
          description: "Bad Request"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        401:
          description: "Unauthorized"
        404:
          description: "Agreement not found"
        500:
          description: "Internal Server Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
    parameters:
    - name: "agreementId"
      in: "path"
      required: true
      type: "string"
      description: "Agreement ID"
  /api/v1/charge/{agreementId}:
    get:
      tags:
      - "charge-controller"
      summary: "List Charges"
      operationId: "listUsingGET_1"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "chargeStatus"
        in: "query"
        required: false
        type: "string"
        description: "The status of the charge"
        enum:
        - "PENDING"
        - "DUE"
        - "CHARGED"
        - "FAILED"
        - "CANCELLED"
        - "PARTIALLY_REFUNDED"
        - "REFUNDED"
        - "PROCESSING"
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ChargeResponse"
        400:
          description: "Invalid request, check your parameters"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        500:
          description: "Internal server error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Timeout"
    post:
      tags:
      - "charge-controller"
      summary: "Create a new charge for a given agreement and customer.\n\nAn idempotency\
        \ key must be provided to ensure idempotent requests.\nKey size [1..30] characters."
      operationId: "createUsingPOST"
      consumes:
      - "application/json;charset=UTF-8"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Idempotent-Key"
        in: "header"
        required: true
        type: "string"
        description: "Idempotent-Key"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CreateCharge"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ChargeResponse"
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/ChargeResponse"
        204:
          description: "No Content (operation succeeded previously)"
          schema:
            $ref: "#/definitions/ChargeResponse"
        400:
          description: "Invalid request, check your parameters"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        409:
          description: "Conflict, retry in a moment. (simultaneous idempotent requests)"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        500:
          description: "Internal server error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Timeout"
    parameters:
    - name: "agreementId"
      in: "path"
      required: true
      type: "string"
      description: "The agreement identifier (id)"
  /api/v1/charge/{agreementId}/{chargeId}:
    get:
      tags:
      - "charge-controller"
      summary: "Fetch a Charge"
      operationId: "getUsingGET_1"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ChargeResponse"
        400:
          description: "The requested charge does not exist"
        500:
          description: "Internal server error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Timeout"
    delete:
      tags:
      - "charge-controller"
      summary: "Cancel a Charge"
      operationId: "cancelUsingDELETE"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ChargeResponse"
        204:
          description: "No Content (operation succeeded previously)"
          schema:
            $ref: "#/definitions/ChargeResponse"
        400:
          description: "Invalid request, check your parameters"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        409:
          description: "This charge is not in a deletable state, it may have already\
            \ been charged to the user."
        500:
          description: "Internal server error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Timeout"
    parameters:
    - name: "agreementId"
      in: "path"
      required: true
      type: "string"
      description: "agreementId"
    - name: "chargeId"
      in: "path"
      required: true
      type: "string"
      description: "The charge identifier (id)"
  /api/v1/charge/{agreementId}/{chargeId}/refund:
    post:
      tags:
      - "charge-controller"
      summary: "Refund a charge\n\nAn idempotency key must be provided to ensure idempotent\
        \ requests.\nKey size [1..30] characters."
      operationId: "refundUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Idempotent-Key"
        in: "header"
        required: true
        type: "string"
        description: "Idempotent-Key"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/RefundRequestDto"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ChargeResponse"
        400:
          description: "Invalid request, check your parameters"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        404:
          description: "Charge does not exist (and never has)"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        500:
          description: "Internal server error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Timeout"
    parameters:
    - name: "agreementId"
      in: "path"
      required: true
      type: "string"
      description: "The agreement identifier (id)"
    - name: "chargeId"
      in: "path"
      required: true
      type: "string"
      description: "The charge identifier (id)"
  /api/v1/draftAgreement:
    post:
      tags:
      - "draft-agreement-controller"
      summary: "Send a new customer to Vipps in order to accept Agreement"
      operationId: "registerUsingPOST"
      consumes:
      - "application/json;charset=UTF-8"
      produces:
      - "application/json;charset=UTF-8"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
        description: "Bearer 'auth token'"
      - name: "Merchant-Serial-Number"
        in: "header"
        required: true
        type: "string"
        description: "The applicable merchant serial number currently being represented"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/DraftAgreement"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DraftAgreementResponse"
        201:
          description: "OK"
          schema:
            $ref: "#/definitions/DraftAgreementResponse"
        400:
          description: "Bad Request"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        401:
          description: "Unauthorized"
        422:
          description: "Unprocessable Entity (invalid json)"
        500:
          description: "Internal Server Error"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FieldErrorDto"
        503:
          description: "Service unavailable"
        504:
          description: "Gateway Timeout"
definitions:
  Agreement:
    type: "object"
    required:
    - "interval"
    - "intervalCount"
    - "price"
    - "productDescription"
    - "productName"
    - "status"
    properties:
      campaign:
        $ref: "#/definitions/campaign"
      currency:
        type: "string"
        enum:
        - "NOK"
        example: "NOK"
      id:
        type: "string"
        description: "Uniquely identifies this agreement"
        example: "agr_5kSeqzFAMkfBbc"
      interval:
        type: "string"
        description: "Interval for subscription"
        enum:
        - "day"
        - "week"
        - "month"
        example: "week"
      intervalCount:
        type: "integer"
        format: "int32"
        description: "Number of intervals between charges. Example: interval=week,\
          \ intervalCount=2 to be able to charge every two weeks. Charges should occur\
          \ at least once a year."
        minimum: 1
        maximum: 31
        example: 2
      price:
        type: "integer"
        format: "int32"
        description: "Treated as a whole sum postfixed with two decimals for cents,\
          \ eg 234 = 2.34 NOK"
        example: 7900
      productDescription:
        type: "string"
        example: "Fin abonnementspakke"
      productName:
        type: "string"
        description: "Name of the product being subscribed to."
        example: "Pluss-abonnement"
      startDate:
        type: "string"
        description: "Date when agreement was started."
        example: "2019-01-01T00:00:00Z"
      status:
        type: "string"
        description: "Status of the agreement."
        enum:
        - "PENDING"
        - "ACTIVE"
        - "STOPPED"
        - "EXPIRED"
        example: "ACTIVE"
      stopDate:
        type: "string"
        description: "Date when agreement was stopped."
        example: "2019-01-01T00:00:00Z"
  ChargeResponse:
    type: "object"
    required:
    - "amount"
    - "amountRefunded"
    - "dueDate"
    - "id"
    - "status"
    properties:
      amount:
        type: "integer"
        format: "int32"
        description: "Treated as a whole sum postfixed with two decimals for cents,\
          \ eg 234 = 2.34 NOK"
        example: 234
      amountRefunded:
        type: "integer"
        format: "int32"
        description: "The total amount which has been refunded, in case of status\
          \ refund/partial refund.\nTreated as a whole sum postfixed with two decimals\
          \ for cents, eg 234 = 2.34 NOK"
        example: 0
      description:
        type: "string"
        example: "Bla bla bla"
      dueDate:
        type: "string"
        example: "2030-12-31T00:00:00Z"
      id:
        type: "string"
        description: "Unique identifier for this charge, up to 15 characters."
        example: "chg_WCVbcAbRCmu2zk"
      status:
        type: "string"
        enum:
        - "PENDING"
        - "DUE"
        - "CHARGED"
        - "FAILED"
        - "CANCELLED"
        - "PARTIALLY_REFUNDED"
        - "REFUNDED"
        - "PROCESSING"
        example: "PENDING"
      transactionId:
        type: "string"
        description: "Contains null until the status has reached CHARGED"
        example: "5001419121"
      type:
        type: "string"
        enum:
        - "INITIAL"
        - "RECURRING"
        example: "RECURRING"
  CreateCharge:
    type: "object"
    required:
    - "amount"
    - "description"
    - "hasPriceChanged"
    properties:
      amount:
        type: "integer"
        format: "int32"
        description: "Treated as a whole sum postfixed with two decimals for cents,\
          \ eg 234 = 2.34 NOK"
        example: 234
      currency:
        type: "string"
        enum:
        - "NOK"
        example: "NOK"
      description:
        type: "string"
        description: "This field is visible to the end user in-app"
        example: "Månedsabonnement"
      dueDate:
        type: "string"
        description: "yyyy-MM-dd"
        example: "2030-12-31"
      hasPriceChanged:
        type: "boolean"
        description: "If the amount exceeds the amount specified on the agreement,\
          \ this field must be true to indicate that there is an update price for\
          \ the parent subscription"
        example: false
      retryDays:
        type: "integer"
        format: "int32"
        description: "The service will attempt to charge the customer for N days [non\
          \ inclusive], must be null or contain a value >= 0. If zero, no retries\
          \ will be performed"
        example: 5
  DraftAgreement:
    type: "object"
    required:
    - "currency"
    - "interval"
    - "intervalCount"
    - "isApp"
    - "merchantAgreementUrl"
    - "merchantRedirectUrl"
    - "price"
    - "productDescription"
    - "productName"
    properties:
      campaign:
        $ref: "#/definitions/campaign"
      currency:
        type: "string"
        enum:
        - "NOK"
        example: "NOK"
      customerPhoneNumber:
        type: "string"
        description: "Customers phone number (if available). Used to simplify the\
          \ following Vipps interaction"
        example: "+4740000000"
      initialCharge:
        $ref: "#/definitions/InitialCharge"
      interval:
        type: "string"
        description: "Interval for subscription"
        enum:
        - "YEAR"
        - "MONTH"
        - "WEEK"
        - "DAY"
        example: "WEEK"
      intervalCount:
        type: "integer"
        format: "int32"
        description: "Number of intervals between charges. Example: interval=week,\
          \ intervalCount=2 to be able to charge every two weeks. Charges should occur\
          \ at least once a year"
        minimum: 1
        maximum: 31
        example: 2
      isApp:
        type: "boolean"
        description: "If merchant is redirecting user from an app."
        example: true
      merchantAgreementUrl:
        type: "string"
        description: "URL where Vipps can redirect the customer to view/administer\
          \ their subscription."
        example: "https://www.merchant.no/subscriptions/1234/"
      merchantRedirectUrl:
        type: "string"
        description: "URL where customer should be redirected after the agreement\
          \ has been approved/rejected in the Vipps mobile application."
        example: "https://api.merchant.no/landing"
      price:
        type: "integer"
        format: "int32"
        description: "Treated as a whole sum postfixed with two decimals for cents,\
          \ eg 234 = 2.34 NOK"
        example: 7900
      productDescription:
        type: "string"
        example: "Fin abonnementspakke"
      productName:
        type: "string"
        description: "Name of the product being subscribed to."
        example: "Pluss-abonnement"
  DraftAgreementResponse:
    type: "object"
    properties:
      agreementResource:
        type: "string"
        description: "Reference to AgreementDto which user may agree to. Initially\
          \ the AgreementDto is in a pendingUserApproval state, and it enters active\
          \ state once user has approved in the Vipps application."
        example: "https://api.vipps.no/api/v1/agreement/agr_5kSeqzFAMkfBbc"
      agreementId:
        type: "string"
        description: "Id of a AgreementDto which user may agree to. Initially the\
          \ AgreementDto is in a pendingUserApproval state, and it enters active state\
          \ once user has approved in the Vipps application."
        example: "agr_5kSeqzFAMkfBbc"
      redirectToVipps:
        type: "string"
        description: "Customer should be redirected to Vipps using this URL."
        example: "https://api.vipps.no/api/v1/register/U6JUjQXq8HQmmV"
  FieldErrorDto:
    type: "object"
    properties:
      code:
        type: "string"
      field:
        type: "string"
      message:
        type: "string"
  HealthCheckStatus:
    type: "object"
    properties:
      application:
        type: "boolean"
      cosmosDb:
        type: "boolean"
      paymentDb:
        type: "boolean"
  InitialCharge:
    type: "object"
    required:
    - "amount"
    - "currency"
    - "description"
    properties:
      amount:
        type: "integer"
        format: "int32"
        description: "Treated as a whole sum postfixed with two decimals for cents,\
          \ eg 234 = 2.34 NOK"
        example: 234
      currency:
        type: "string"
        enum:
        - "NOK"
        example: "NOK"
      description:
        type: "string"
        description: "This field is visible to the end user in-app"
        example: "Månedsabonnement"
    description: "An initial charge for a new agreement. The charge will be executed\
      \ immediately when the user approves the agreement."
  RefundRequestDto:
    type: "object"
    properties:
      amount:
        type: "integer"
        format: "int32"
        description: "The amount to refund"
        example: 100
      description:
        type: "string"
        description: "A textual description of the operation, which will be displayed\
          \ in the users app."
        example: "Forgot to apply discount, refunding 50%"
  campaign:
    type: "object"
    properties:
      campaignPrice:
        type: "integer"
        format: "int32"
        description: "The price of the agreement in the discount period. The lowering\
          \ of the price will be displayed in-app."
        example: 1500
      end:
        type: "string"
        description: "The date and time the campaign ends. Needs to be UTC"
        example: "2019-06-01T00:00:00Z"
